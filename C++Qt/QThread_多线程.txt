//1.
#include <QWaitCondition>//等待条件
#include <QThread>//线程
#include <QMutex>//互斥锁
...
void Producer::run()//QThread类必须重写run函数
{
    for(int i=0;i<DataSize;++i)
    {
        mutex.lock();//对临界资源使用同一个互斥锁lock，以避免同时使用

        if(numUsableBytes==BufferSize)
            bufferEmpty.wait(&mutex);//如果缓存区满，阻塞进程到缓存区有空闲

        buffer[i%BufferSize]=numUsableBytes;//写入数据
        ++numUsableBytes;//增加可用字节
        bufferFull.wakeAll();//唤醒所有等待缓存区有数据的消费者

        mutex.unlock();
    }
}
...
void Consumer::run()
{
    forever
    {
        mutex.lock();

        if(numUsableBytes==0)
            bufferFull.wait(&mutex);//如果缓存区空，等待生产者写入数据

        printf("%u::[%d]=%d\n",currentThreadId(),rIndex,buffer[rIndex]);//输出
                             //currentThreadId()返回线程ID值
        ++rIndex;//下一字节
        rIndex=rIndex%BufferSize;//防止超界
        bufferEmpty.wakeAll();

        mutex.unlock();
    }
    printf("finshed\n");
}
...
producer.start();//start()启动线程
...
producer.wait();//等待
