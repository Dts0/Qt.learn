//1.QGraphicsItem类

QGraphicsItem(QGraphicsItem *parent = Q_NULLPTR)

virtual QRectF 
boundingRect() const = 0

virtual void 
paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = Q_NULLPTR) = 0

有两个必须在子类实现的纯虚函数

//2.关于2D绘制的实现
#include <QGraphicsItem>
#include <QPainter>
#include <QGraphicsScene>
#include <QGraphicsview>
#include "myitem.h"

//声明场景，视图，要绘制的项
QGraphicsScene *scene = new QGraphicsScene;
QGraphicsView *view = new QGraphicsView;
MyItem *item = new MyItem();

scene->addItem();//向场景中添加项
view->setScene(scene);//场景关联到视图

view->show();//显示视图

//3.item的碰撞检测

在QGraphicsItem类中有三个碰撞检测函数，分别是collidesWithItem()、collidesWithPath()和collidingItems()，我们使用的是第三个。第一个是该图形项是否与指定的图形项碰撞，第二个是该图形项是否与指定的路径碰撞，第三个是返回所有与该图形项碰撞的图形项的列表。在帮助中我们可以查看它们的函数原型和介绍，这里要说明的是，这三个函数都有一个共同的参数Qt::ItemSelectionMode，它指明了怎样去检测碰撞。我们在帮助中进行查看，可以发现它是一个枚举类型，一共有四个值，分别是：

Qt::ContainsItemShape ：只有图形项的shape被完全包含时；
Qt::IntersectsItemShape ：当图形项的shape被完全包含时，或者图形项与其边界相交；
Qt::ContainsItemBoundingRect ： 只有图形项的bounding rectangle被完全包含时；
Qt::IntersectsItemBoundingRect ：图形项的bounding rectangle被完全包含时，或者图形项与其边界相交。

如果我们不设置该参数，那么他默认使用Qt::IntersectsItemShape 。这里所说的shape是指什么呢？在QGraphicsItem类中我们可以找到shape()函数，它返回的是一个QPainterPath对象，也就是说它能确定我们图形项的形状。但是默认的，它只是返回boundingRect()函数返回的矩形的形状。

//4.事件传递

    在上面我们看到必须在事件函数的最后将event参数传递出去，才能执行默认的事件操作。其实不止上面那一种情况，在图形视图框架中，鼠标键盘等事件是从视图进入的，视图将它们传递给场景，场景再将事件传递给该点的图形项，如果该点有多个图形项，那么就传给最上面的图形项。所以要想使这个事件能一直传播下去，我们就需要在重新实现事件处理函数时，在其最后将event参数传给默认的事件处理函数。比如我们重写了场景的键盘按下事件处理函数，那么我们就在该函数的最后写上QGraphicsScene::keyPressEvent(event);一行代码。

//5.OpenGL渲染

        QGraphicsView默认使用一个QWidget作为视口部件，如果我们要使用OpenGL进行渲染，可以使用setViewport()函数来添加一个QGLWidget对象。看下面的例子。
我们先在项目文件graphicsview03.pro中加入

QT += opengl

        说明要使用OpenGL模块，然后在myview.cpp文件中添加头文件：

#include <QGLWidget>

        最后在构造函数中加入代码：

QGLWidget *widget =new QGLWidget(this);
setViewport(widget);

        这样便使用OpenGL进行渲染了。